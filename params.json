{"name":"Blog","tagline":"Just do what you want!","body":"# Ubuntu工作环境搭建小记\r\n作者 Jeff Chan(@chjhuang) | 发布于 2015-06-30\r\n\r\n## 目录\r\n\r\n<!-- MarkdownTOC depth=3 -->\r\n- [系统安装](#system_install)\r\n- [桌面环境](#desktop_environment)\r\n    - [Input Method](#input_method)\r\n    - [Google Chrome](#google_chrome)\r\n    - [Terminator](#terminator)\r\n    - [everpad](#everpad)\r\n    - [VLC](#vlc)\r\n    - [Stickynotes](#stickynotes)\r\n- [开发环境](#develop_environment)\r\n    - [Vim](#vim)\r\n    - [Git](#git)\r\n    - [Java](#java)\r\n    - [Python & C family](#python_c)\r\n    - [NodeJS](#nodejs)\r\n    - [Latex](#latex)\r\n- [终端命令工具](#terminal_tools)\r\n    - [xclip](#xclip)\r\n\r\n<!-- /MarkdownTOC -->\r\n\r\n趁着夏季小学期课少，闲來无事终于决定要彻底将工作开发环境从Windows转到Linux下了。为了方便以后重装或者移植到新的PC，所以现在将这几天的折腾过程进行记录存档。\r\n\r\n之前断断续续玩过一段时间的CentOS，也玩过一会Ubuntu。虽然个人比较喜欢CentOS蓝黑的清爽风格，但是其软件管理、依赖解决等没有Ubuntu的好(比如安装Chrome，依赖库解决比较费事)，所以为了省事(不想折腾)，最终选择了Ubuntu发行版。\r\n\r\n<a name=\"system_install\" />\r\n## 系统安装\r\n\r\n1. 电脑为*`Thinkpad T430`*，采用Windows和Ubuntu双系统硬盘安装。引导方式及硬盘分区表为*`UEFI+GPT`*，与*`BIOS+MBR`*不同的是，所有系统的引导程序都会放到一个隐藏的格式为FAT32的*`EFI`*引导分区(/dev/sda2)。所以若要配置多系统的引导，则需要修改该分区中的.efi文件。例如在Windows+CentOS中，就需要安装第三方引导程序refind到EFI分区，并通过修改refind.conf文件来引导多系统的加载。不过Ubuntu不用你费事，其grub引导程序能够帮你解决一切。\r\n\r\n2. 接下来是*`U盘`*启动盘的制作。从6V下载最新*`Ubuntu 15.04`*镜像(1G大小)，用*`UltraISO`*->文件->打开...，然后启动->写入硬盘映射，刻录到U盘。(*注意*：如果用UltraISO->文件->打开Ubuntu镜像时只有EFI文件夹，可以先用系统自带的ISO打开方式加载镜像，然后UltraISO->文件->打开光盘->选择刚刚ISO挂载的盘符，接着写入硬盘映射)。\r\n\r\n3. 选择U盘启动，安装方式选择第三项`自定义安装`，即手动进行分区和选择挂载点。我留给Ubuntu系统的磁盘空间大小大概有120G，具体分区情况为：\r\n\r\n    * `/` &ensp; 30G(系统根目录挂载点)\r\n    * `/var` &ensp; 10G(系统运行时要改变的数据)\r\n    * `swap` &ensp; 4G(内存交换区)\r\n    * `/home` &ensp; 剩下的所有空间\r\n\r\n4. 系统初始配置\r\n\r\n    * 设置root密码\r\n\r\n    ```sh\r\n    sudo passwd root\r\n    ```\r\n\r\n    * 设置开机启动等待时间\r\n\r\n    ```sh\r\n    sudo gedit /etc/default/grub   # 修改GRUB_TIMEOUT项\r\n    sudo update-grub\r\n    ```\r\n\r\n    * 设置系统更新源([清华大学源][])\r\n\r\n    ```sh\r\n    sudo gedit /etc/apt/sources.list\r\n    sudo apt-get update\r\n    ```\r\n\r\n    系统[sources.list][]文件已上传至Github，可以备份本地文件后，从github上拉取：\r\n\r\n    ```sh\r\n    mv /etc/apt/sources.list /etc/apt/sources.list.old\r\n    curl https://raw.githubusercontent.com/chjhuang/blog/master/2015/06/sources.list \\\r\n        > /etc/apt/sources.list\r\n    ```\r\n\r\n    另外，关于sources.list中的*`vivid`*，这是Ubuntu 15.04的版本代号(codename)。所以如果是其他版本的Ubuntu，则要将文件中所有的`vivid`替换成对应的版本代号，下表列出了部分Ubuntu版本号和代号(和Eclipse等软件类似，也是按照首字母的字典顺序来进行命名的)的对应关系：\r\n\r\n     版本号  |  代号  | 完整代号\r\n    ---------|--------|---------\r\n    8.04 LTS |hardy   |Hardy Heron\r\n    9.10     |karmic  |Karmic Koala\r\n    10.04 LTS|lucid   |Lucid Lynx\r\n    10.10    |maverick|Maverick Meerkat\r\n    11.04    |natty   |Natty Narwhal\r\n    11.10    |oneiric |Oneiric Ocelot\r\n    12.04 LTS|precise |Precise Pangolin\r\n    12.10    |quantal |Quantal Quetzal\r\n    13.04    |raring  |Raring Ringtail\r\n    14.04 LTS|trusty  |Trusty Tahr\r\n    14.10    |utopic  |Utopic Unicorn\r\n    15.04    |vivid   |Vivid Vervet\r\n\r\n    * 另外，为了方便操作Windows系统下的资源，可以在Ubuntu Home目录下建立对应资源的`软链接`：\r\n        * Windows/Desktop -> Home/Desktop: \r\n\r\n        ```sh\r\n        ln -s /media/jeff/Windows8_OS/Users/hwq/Desktop ~/Desktop/W_Desktop\r\n        ```\r\n\r\n        * Windows/Pictures -> Home/Pictures\r\n\r\n        ```sh\r\n        ln -s /media/jeff/Windows8_OS/Users/hwq/Pictures ~/Pictures/W_Pictures\r\n        ```\r\n\r\n        * Windows/Documents -> Home/Documents\r\n\r\n        ```sh\r\n        ln -s /media/jeff/Windows8_OS/Users/hwq/Documents ~/Documents/W_Documents\r\n        ```\r\n\r\n        * Windows下其他常用文件夹 -> Home中Documents或Desktop中\r\n\r\n        这样，在终端输入`Desktop/W_Desktop`路径就可以操作Windows桌面了，省了一大段路径名。\r\n\r\n[清华大学源]: http://mirrors.tuna.tsinghua.edu.cn/ \"tsinghua\"\r\n[sources.list]: https://github.com/chjhuang/blog/blob/master/2015/06/sources.list \"sources.list\"\r\n\r\n\r\n<a name=\"desktop_environment\" />\r\n## 桌面环境\r\n\r\n<a name=\"input_method\" />\r\n### Input Method\r\n\r\n输入法沿用Ubuntu自带ibus输入法框架，并在其上安装*`sunpinyin`*中文输入法：\r\n\r\n```sh\r\nsudo apt-get install ibus-sunpinyin\r\n```\r\n\r\n<a name=\"google_chrome\" />\r\n### Google Chrome\r\n\r\n一直在用Google Chrome浏览器，所以为了同步，卸载掉了自带的Firefox浏览器。Ubuntu中Chrome浏览器的安装相对CentOS来说比较简单：\r\n\r\n* 方法1-直接下载\r\n\r\n```sh\r\n# 下载对应系统Google Chrome最新deb安装包\r\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\r\nsudo dpkg -i google-chrome-stable_current_amd64.deb  # 安装deb软件包\r\nsudo apt-get install -f  # 安装缺少依赖库，递归安装上一指令缺少的所有依赖库\r\nsudo dpkg -i google-chrome-stable_current_amd64.deb  # 解决依赖库问题后再次安装\r\n```\r\n\r\n* 方法2-添加Google Chrome的PPA\r\n\r\n```sh\r\nwget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub \\\r\n    | sudo apt-key add\r\nsudo sh -c 'echo \"deb http://dl.google.com/linux/chrome/deb/ stable main\" >> /etc/apt/sources.list.d/google-chrome.list'\r\nsudo apt-get update\r\nsudo apt-get install google-chrome\r\n```\r\n\r\n附带提一下，关于CentOS系列Google Chrome的安装(~~好像是Google developers觉得CentOS的Linux构建系统太老而取消了支持~~)，国外某大神写了个`一键`安装脚本[install_chrome.sh][]，亲测有效。\r\n\r\n[install_chrome.sh]: http://chrome.richardlloyd.org.uk/ \"Google Installer\"\r\n\r\n<a name=\"terminator\" />\r\n### Terminator\r\n\r\nUbuntu自带的终端是gnome-terminal，但不支持分屏，复制粘贴支持也不爽，所以卸载掉了terminal，换用terminator。\r\n\r\n* 安装\r\n\r\n```sh\r\nsudo apt-get install terminator\r\n```\r\n\r\n* 配置\r\n\r\n    * 终端配色\r\n\r\n    配色使用[Solarized][]系列，配置该系列对应terminator终端的配色方案[terminator-solarized][]操作如下：\r\n\r\n    ```sh\r\n    mkdir -p ~/.config/terminator\r\n    curl https://raw.githubusercontent.com/ghuntley/terminator-solarized/master/config \\\r\n        > ~/.config/terminator/config\r\n    ```\r\n\r\n    * ls配色\r\n\r\n    使用solarized配色后，你会发现用ls命令查看目录和文件时是一片灰色。这是因为默认情况下solarized各种bright方案基本都是灰色，而系统默认显示目录和文件时多用bright色，此时需要配置dircolors才能显示出彩色的文件和目录。\r\n\r\n    [dircolors-solarized][]项目提供了适合于solarized的dircolors配色方案，只要选择合适的方案使用就可以了。我参照<http://blog.codinglabs.org/articles/getting-started-with-ubuntu.html>中的做法，选择了适合这个配色的dircolors.ansi-dark：\r\n\r\n    ```sh\r\n    curl https://raw.githubusercontent.com/seebi/dircolors-solarized/master/dircolors.ansi-dark \\\r\n        > ~/.dircolors\r\n    ```\r\n\r\n    然后在*`~/.bashrc`*中作如下配置(Ubuntu好像默认有该配置)：\r\n\r\n    ```bash\r\n    # enable color support of ls and also add handy aliases\r\n    if [ -x /usr/bin/dircolors ]; then\r\n        test -r ~/.dircolors && eval \"$(dircolors -b ~/.dircolors)\" || eval \"$(dircolors -b)\"\r\n        alias ls='ls --color=auto'\r\n        #alias dir='dir --color=auto'\r\n        #alias vdir='vdir --color=auto'\r\n        \r\n        alias grep='grep --color=auto'\r\n        alias fgrep='fgrep --color=auto'\r\n        alias egrep='egrep --color=auto'\r\n    fi\r\n    ```\r\n\r\n    * 其他配置\r\n\r\n    对terminator诸如快捷键绑定等其他更多配置既可以在终端图形界面右键->preferences，也可以通过修改*`~/.config/terminator/config`*文件来进行设置。关于terminatro的详细配置选项可以参考[terminator manpage][]。\r\n\r\n[Solarized]: http://ethanschoonover.com/solarized \"Solarized\"\r\n[terminator-solarized]: https://github.com/ghuntley/terminator-solarized \"terminator solarized\"\r\n[dircolors-solarized]: https://github.com/seebi/dircolors-solarized \"dircolors solarized\"\r\n[terminator manpage]: http://manpages.ubuntu.com/manpages/vivid/man5/terminator_config.5.html \"manpage\"\r\n\r\n<a name=\"everpad\" />\r\n### everpad\r\n\r\n印象笔记现在没有Linux客户端，所以安装了一个第三方开源客户端[everpad][]：\r\n\r\n* 安装\r\n\r\n```sh\r\nsudo add-apt-repository ppa:nvbn-rm/ppa\r\nsudo apt-get update\r\nsudo apt-get install everpad\r\n```\r\n\r\n* 配置\r\n\r\n由于该客户端默认的授权链接是国际版Evernote，所以为了支持Evernote的中国版也就是印象笔记的授权，需要将其配置文件*`/usr/share/pyshared/everpad/const.py`*中的\r\n```py\r\nHOST = 'www.evernote.com' 修改为\r\nHOST = 'app.yinxiang.com'\r\n```\r\n\r\n运行即可跳转到授权页面完成授权，然后就可以愉快地进行笔记同步了(~~不过界面有点丑~~)。\r\n\r\n[everpad]: https://github.com/nvbn/everpad \"everpad\"\r\n\r\n<a name=\"vlc\" />\r\n### VLC\r\n\r\n又一个很喜欢的软件*`potPlayer`*没有Linux版客户端(~~摔~~)，系统自带的视频播放器又很难用，所以选择了一个据说很强大的播放软件(几乎通吃所有格式的音视频)：\r\n\r\n```sh\r\nsudo apt-get install vlc\r\n```\r\n\r\n<a name=\"stickynotes\" />\r\n### Stickynotes\r\n\r\n不管是作日程安排，还是作碎片记忆，还是做各种Command、Shortcuts的(~~都Linux了，当然要追求纯键盘工作~~)Cheat Sheet，都离不开一个好的便利贴软件。对于这种小软件，我的要求是`简洁有效`，所以选择了[Stickynotes][]：\r\n\r\n```sh\r\nsudo add-apt-repository ppa:umang/indicator-stickynotes\r\nsudo apt-get update\r\nsudo apt-get install indicator-stickynotes\r\n```\r\n\r\n不过，这软件还是不完美，我只是想要一个可以触发便签`隐藏/显现`的快捷键。\r\n\r\n[Stickynotes]: https://launchpad.net/indicator-stickynotes \"indicator stickynotes\"\r\n\r\n\r\n<a name=\"develop_environment\" />\r\n## 开发环境\r\n\r\n<a name=\"vim\" />\r\n### Vim\r\n\r\n说好了要geek到纯键盘操作，那么Vim作为常用的高效文本(~~zhuang~~)编辑(~~bi~~)利器，自然值得好好配置一番。\r\n\r\n* 安装\r\n\r\n```sh\r\nsudo apt-get install vim\r\n```\r\n\r\n* 配置\r\n\r\n    Vim的配置主要是`插件安装`和`快捷键设置`。\r\n\r\n    1. 为了更好地进行插件管理，首先安装插件管理工具[vim-plug][]: \r\n\r\n    ```sh\r\n    # Install Vim plugin manager to ~/.vim\r\n    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\\r\n        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\r\n    ```\r\n\r\n    2. 然后编辑Vim的配置文件`~/.vimrc`，选择自己需要的插件，进行插件参数和启动快捷键等设置以及进行一些Vim的其他通用设置：\r\n\r\n    ```vim\r\n    \" The simple usage example of vim-plug\r\n    call plug#begin('~/.vim/plugged')\r\n    \r\n    \" On-demand loading\r\n    Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }\r\n    \r\n    \" Using git URL\r\n    Plug 'https://github.com/junegunn/vim-github-dashboard.git'\r\n    \r\n    \" Unmanaged plugin (manually installed and updated)\r\n    Plug '~/my-prototype-plugin'\r\n    \r\n    \" Install other plugin ...\r\n    \r\n    call plug#end()\r\n\r\n    \" Plugin Settings and General Settings\r\n    \" ...\r\n    ```\r\n\r\n    为了方便，我已经将现在的[.vimrc][]上传到了Github。可以备份本地.vimrc后从github中直接拉取之前的配置文件：\r\n\r\n    ```sh\r\n    mv ~/.vimrc ~/.vimrc.old  # backup(it's depend)\r\n    curl https://raw.githubusercontent.com/chjhuang/blog/master/2015/06/.vimrc \\\r\n        > ~/.vimrc\r\n    ```\r\n\r\n    3. 根据不同插件，检查并安装各自所需要的运行环境，如语法检查插件`synatic`需要`python-dev`环境，`vim-instant-markdown`需要`instant-markdown-d`的支持等。各插件说明和需要的前续操作在.vimrc处有说明。\r\n\r\n    4. 安装好插件的编译环境(有些插件需要)和运行环境后，打开`vim`，执行命令`:PlugInstall`进行插件安装。\r\n\r\n    5. 插件安装完成后，就可以愉快地Geek and Coding了。\r\n\r\n    6. 为了实现`一键`配置，后续可能会写一个Vim自动配置脚本文件。\r\n\r\n[vim-plug]: https://github.com/junegunn/vim-plug \"Plugin Manager\"\r\n[.vimrc]: https://github.com/chjhuang/blog/blob/master/2015/06/.vimrc \".vimrc\"\r\n\r\n<a name=\"git\" />\r\n### Git\r\n\r\nGit这么强大工具再加上Github这个全球最大~~同性交友~~网站，不仅可以做代码管理，还可以与各路大神神交、进行资料收集、做笔记、备份文件、写Blog等，值得认真泡泡。\r\n\r\n* 安装\r\n\r\n```sh\r\nsudo apt-get install git\r\n```\r\n\r\n* [配置][]\r\n\r\n    1. 检查系统是否已有可用*`SSH keys`*：\r\n\r\n    ```sh\r\n    ls -al ~/.ssh  # 列出现有SSH keys\r\n    ```\r\n\r\n    2. 如果有，直接跳到第三步，否则生成一个新的SSH keys：\r\n\r\n    ```sh\r\n    # Creates a new ssh key, using the provided email as a label\r\n    ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" \r\n    ```\r\n\r\n    选择默认密钥对保存路径(即弹出\"Enter file in which to save the key(default path):\"时，按*`Enter`*继续)，并选择一个好的安全的[passphrase][]。\r\n\r\n    3. 将key加入ssh-agent：\r\n\r\n    ```sh\r\n    # start the ssh-agent in the background\r\n    eval \"$(ssh-agent -s)\"\r\n    ssh-add ~/.ssh/id_rsa  # Add your SSH key to the ssh-agent\r\n    ```\r\n\r\n    4. 将公钥发布到github：\r\n\r\n    ```sh\r\n    # Downloads and installs xclip.\r\n    sudo apt-get install xclip\r\n    # Copies the contents of the id_rsa.pub file to your clipboard>\r\n    xclip -sel clip < ~/.ssh/id_rsa.pub\r\n    ```\r\n\r\n    然后将其粘贴到GitHub账户Settings->SSH key->Add SSH key。\r\n\r\n    5. 验证连接\r\n\r\n    ```sh\r\n    ssh -T git@github.com  # Attempts to ssh to GitHub\r\n    ```\r\n\r\n    Type `yes`，如果看到\"Hi username! You've successfully authenticated, but GitHub does not provide shell access.\"，则说明连接成功。\r\n\r\n    6. 设置全局用户账户\r\n\r\n    ```sh\r\n    git config --global user.email \"your_email@example.com\"\r\n    git config --global user.name \"your name\"\r\n    git config --global push.default simple  # Git 2.0以上为simple, 2.0以下为matching\r\n    ```\r\n\r\n[配置]: https://help.github.com/articles/generating-ssh-keys/ \"generating ssh keys\"\r\n[passphrase]: https://help.github.com/articles/working-with-ssh-key-passphrases/ \"passphrase\"\r\n\r\n<a name=\"java\" />\r\n### Java\r\n\r\n现在用的主要开发语言是Java，所以需要配置Java开发运行环境。\r\n\r\n* JDK\r\n\r\n    * 方法一(推荐)\r\n\r\n        ```sh\r\n        # 添加JDK deb源\r\n        sudo add-apt-repository \"deb http://archive.canonical.com/ vivid partner\"\r\n        sudo apt-get update\r\n        sudo apt-get install sun-java8-jdk sun-java8-jre sun-java8-plugin\r\n        java -version  # Check\r\n        ```\r\n    \r\n    * 方法二\r\n\r\n        1. 与Windows下类似，首先到[Oracle][]下载64位Linux下的JDK，然后解压\r\n\r\n        ```sh\r\n        mkdir /usr/java  # 本地安装一般安装在/usr/local目录下\r\n        cd /usr/java\r\n        sudo tar -xzvf ~/Downloads/jdk-8u45-linux-x64.tar.gz\r\n        ```\r\n\r\n        2. 接着进行环境变量配置：\r\n\r\n        ```sh\r\n        sudo vim /etc/profile\r\n        ```\r\n\r\n        在最后加入：\r\n\r\n        ```bash\r\n        # JDK Environment Variables\r\n        export JAVA_HOME=/usr/java/jdk1.8.0_45\r\n        export CLASSPATH=$CLASSPATH:.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib\r\n        export PATH=$PATH:$JAVA_HOME/bin \r\n        ```\r\n\r\n        3. 重新加载系统环境变量：\r\n\r\n        ```sh\r\n        source /etc/profile\r\n        ```\r\n\r\n* IDE\r\n\r\n    虽然说Vim很强大，但Java作为具有很多很优秀IDE，且工程结构比较复杂的面向对象语言，还是要配个IDE这种好鞍的。既然业界风向标Google在开发其`Android Studio`时都抛弃`Eclipse`，转投`IntelliJ`了，那么我当然也要尝试一下这个所谓的*\"The Most Intelligent Java IDE\"*了。[IntelliJ IDEA][]分为`Ultimate Edition`和`Community Edition`两个版本，穷到极致的我当然只能选择开源的社区版了，不过对于主要写Java项目的我来说足够了。其[安装][]很简单：\r\n\r\n    1. [下载][]\r\n\r\n    2. 解压\r\n\r\n    ```sh\r\n    cd /usr/java\r\n    sudo tar -xzvf ~/Downloads/ideaIC-14.1.4.tar.gz\r\n    ```\r\n\r\n    3. 启动运行\r\n\r\n    ```sh\r\n    cd /usr/java/idea-IC-141.1532.4/bin  # 切换到bin目录\r\n    sh idea.sh   # 启动运行\r\n    ```\r\n\r\n    4. 配置，并创建桌面快捷方式: `Configure | Create Desktop Entry`\r\n\r\n    5. 原有Eclipse工程转换及更多其他操作信息可参照IntelliJ IDEA的[Help][]文档。\r\n\r\n[Oracle]: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html \"JDK\"\r\n[IntelliJ IDEA]: https://www.jetbrains.com/idea/ \"IntelliJ IDEA\"\r\n[安装]: https://www.jetbrains.com/idea/help/basics-and-installation.html \"Installation\"\r\n[下载]: https://www.jetbrains.com/idea/download/ \"Download\"\r\n[Help]: https://www.jetbrains.com/idea/help/eclipse.html \"Eclipse\"\r\n\r\n<a name=\"python_c\" />\r\n### Python & C family\r\n\r\nUbuntu系统自带`Python 2.7`、`Python 3.4`、`gcc 4.9`等编译运行环境。而且现在也没有用这些语言进行大项目开发，所以用Vim(具有语法检查并能够自补全)编辑，然后在终端编译运行就足够了。\r\n\r\n<a name=\"nodejs\" />\r\n### NodeJS\r\n\r\nNodeJs是Javascrpit的Server端运行版，Vim的某些插件用得到，其安装如下: \r\n\r\n```sh\r\nsudo apt-get install npm  # 或者\r\nsudo apt-get install nodejs\r\n```\r\n\r\n<a name=\"latex\" />\r\n### Latex\r\n\r\n既然决定要`Geek`，那么就要Geek到底。抛弃`Word`，选择`Latex`；用`HTML5 + JS`代替`Power Point`；`Excel`？这是什么鬼。还是想用`Office`，没事，Ubuntu系统自带`LibreOffice`。\r\n\r\n进入正题，为了可以支持中文文档的编辑，选择使用基于`Unicode`的`TeX`排版系统[XeTex][]。其是由Jonathan Kew开发并使用Unicode编码，因而支持多种语言并能够直接访问操作系统字体。XeTex环境配置如下：\r\n\r\n* 准备工作(可选)\r\n    \r\n    由于XeTex能够直接使用操作系统字体，所以这一步是可选的。不过Linux中的中文字体多数不太适合用于排版文档，所以建议复制Windows中的字体或Adobe的字体。\r\n\r\n    * 获取中文字体\r\n\r\n        * 从Windows复制\r\n\r\n        ```sh\r\n        sudo mkdir /usr/share/fonts/win\r\n        sudo cp /media/jeff/Windows8_OS/Windows/Fonts/{SIM,sim}* \\\r\n            /usr/share/fonts/win/\r\n        sudo chmod 755 /usr/share/fonts/win/*\r\n        ```\r\n\r\n        * 安装`Microsoft`的公开免费字体\r\n\r\n        ```sh\r\n        sudo apt-get install xfonts-wqy ttf-wqy-microhei ttf-wqy-zenhei\r\n        ```\r\n\r\n        * 获取Adobe字体(？)\r\n\r\n    * 更新系统字体缓存\r\n\r\n    ```sh\r\n    sudo fc-cache -f -s -v  # 更新系统字体缓存\r\n    fc-list :lang=zh  # 查看系统现有中文字体\r\n    ```\r\n\r\n* 安装\r\n\r\n```sh\r\n# 安装xetex和xelatex，可以直接通过install xelatex\r\n# 来实现，Ubuntu会自动安装xelatex依赖的xetex库。\r\n# xelatex是xetex的命令，能够直接编译生成pdf\r\nsudo apt-get install texlive-xelatex\r\n\r\n# 安装中文支持CJK\r\nsudo apt-get install latex-cjk-chinese\r\n\r\n# 安装Latex的science包，以后编译遇到包找不到的情况，\r\n# 都可以通过Google，找到对应的安装包名，进行后续安装\r\nsudo apt-get install texlive-science\r\n```\r\n\r\n* 用法示例(使用xeCJK排版中文)\r\n\r\n根据Latex语法，用Vim编辑`example.tex`文件(`UTF-8`):\r\n\r\n```tex\r\n\\documentclass[11pt]{article}\r\n% 使用xeCJK排版中文\r\n\\usepackage[BoldFont,SlantFont,CJKchecksingle]{xeCJK}\r\n\\setCJKmainfont[BoldFont=SimHei]{SimSun}  % 设置缺省中文字体\r\n\\setCJKmonofont{SimSun}\r\n\\parindent 2em   %段首缩进\r\n\r\n\\begin{document}\r\n\\section{举例}\r\n\\begin{verbatim}\r\n标点。\r\n\\end{verbatim}\r\n\r\n汉字Chinese数学$x=y$空格\r\n\\end{document}\r\n```\r\n\r\n完成之后，在终端输入：\r\n\r\n```sh\r\nxelatex example.tex\r\n```\r\n\r\n即可编译生成对应的`pdf`文件。\r\n\r\n[XeTeX]: http://scripts.sil.org/xetex \"XeTeX\"\r\n\r\n\r\n<a name=\"terminal_tools\" />\r\n## 终端命令工具\r\n\r\n<a name=\"xclip\" />\r\n### xclip\r\n\r\nxclip命令建立了终端和剪切板之间的通道，可以将终端输出或文件内容保存到剪切板，也可以将剪切板的内容输出到终端或文件。Ubuntu需要自己安装：\r\n\r\n```sh\r\nsudo apt-get install xclip\r\n```\r\n\r\n常用命令包括：\r\n\r\n```sh\r\nxclip filename  # 将指定文件输出到剪贴板\r\nls -al | xclip  # 将终端输出保存到剪贴板\r\nxclip -o  # 剪切板内容输出到终端\r\nxclip -o > filename  # 剪切板内容输出到文件\r\n```\r\n\r\n不过这里需要`注意`，在X11(Linux系列的GUI视窗系统)系统中有多个[clipboards][]，其中最主要的两个是：\r\n\r\n* `PRIMARY` —— Normally copied to implicitly with mouse selection, and pasted with a middle mouse click.\r\n* `CLIPBOARD` —— Normally used explicitly from applications, such as with C-c, C-x, and C-v.\r\n\r\nxclip默认选择的是`X PRIMARY`，所以，如果想用`X CLIPBOARD`的话，需要用\r\n\r\n```sh\r\nxclip -selection c  # 输出到c\r\nxclip -o -selection c # 从c输出\r\n```\r\n\r\n[clipboards]: http://www.debian-administration.org/article/565/Using_the_X_clipboard_from_the_command_line \"xclip\"\r\n\r\n\r\n*(未完待续......)*\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}