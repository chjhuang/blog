{"name":"Blog","tagline":"Just do what you want!","body":"# Ubuntu桌面环境搭建小记\r\n作者 Jeff Chan(@chjhuang) | 发布于 2015-06-30\r\n\r\n趁着夏季小学期课少，闲來无事终于决定要彻底将工作开发环境从Windows转到Linux下了。为了方便以后重装或者移植到新的PC，所以现在将这几天的折腾过程进行记录存档。\r\n\r\n之前断断续续玩过一段时间的CentOS，也玩过一会Ubuntu。虽然个人比较喜欢CentOS蓝黑的清爽风格，但是其软件管理、依赖解决等没有Ubuntu的好(比如安装Chrome，依赖库解决比较费事)，所以为了省事(不想折腾)，最终选择了Ubuntu发行版。\r\n\r\n## 系统安装\r\n\r\n1. 电脑为*`Thinkpad T430`*，采用Windows和Ubuntu双系统硬盘安装。引导方式及硬盘分区表为*`UEFI+GPT`*，与*`BIOS+MBR`*不同的是，所有系统的引导程序都会放到一个隐藏的格式为FAT32的*`EFI`*引导分区(/dev/sda2)。所以若要配置多系统的引导，则需要修改该分区中的.efi文件。例如在Windows+CentOS中，就需要安装第三方引导程序refind到EFI分区，并通过修改refind.conf文件来引导多系统的加载。不过Ubuntu不用你费事，其grub引导程序能够帮你解决一切。\r\n\r\n2. 接下来是*`U盘`*启动盘的制作。从6V下载最新*`Ubuntu 15.04`*镜像(1G大小)，用*`UltraISO`*->文件->打开...，然后启动->写入硬盘映射，刻录到U盘。(*注意*：如果用UltraISO->文件->打开Ubuntu镜像时只有EFI文件夹，可以先用系统自带的ISO打开方式加载镜像，然后UltraISO->文件->打开光盘->选择刚刚ISO挂载的盘符，接着写入硬盘映射)。\r\n\r\n3. 选择U盘启动，安装方式选择第三项`自定义安装`，即手动进行分区和选择挂载点。我留给Ubuntu系统的磁盘空间大小大概有120G，具体分区情况为：\r\n\r\n    * `/` &ensp; 30G(系统根目录挂载点)\r\n    * `/var` &ensp; 10G(系统运行时要改变的数据)\r\n    * `swap` &ensp; 4G(内存交换区)\r\n    * `/home` &ensp; 剩下的所有空间\r\n\r\n4. 系统初始配置\r\n\r\n    * 设置root密码\r\n\r\n    ```sh\r\n    sudo passwd root\r\n    ```\r\n\r\n    * 设置开机启动等待时间\r\n\r\n    ```sh\r\n    sudo gedit /etc/default/grub   # 修改GRUB_TIMEOUT项\r\n    sudo update-grub\r\n    ```\r\n\r\n    * 设置系统更新源([清华大学源][])\r\n\r\n    ```sh\r\n    sudo gedit /etc/apt/sources.list\r\n    sudo apt-get update\r\n    ```\r\n\r\n    系统sources.list文件已上传至[Github][sources.list]。\r\n\r\n[清华大学源]: http://mirrors.tuna.tsinghua.edu.cn/ \"tsinghua\"\r\n[sources.list]: https://github.com/chjhuang/blog \"sources.list\"\r\n\r\n\r\n## 桌面环境搭建\r\n\r\n### Terminator\r\n\r\n* 安装\r\n\r\n```sh\r\nsudo apt-get install terminator\r\n```\r\n\r\n* 配置\r\n\r\n    * 终端配色\r\n\r\n    ```sh\r\n    mkdir -p ~/.config/terminator\r\n    curl https://raw.github.com/ghuntley/terminator-solarized/master/config > ~/.config/terminator/config\r\n    ```\r\n\r\n    * ls配色\r\n\r\n    ```sh\r\n    curl https://raw.githubusercontent.com/seebi/dircolors-solarized/master/dircolors.ansi-dark > ~/.dircolors\r\n    vim ~/.bashrc\r\n    source ~/.bashrc\r\n    ```\r\n\r\n\r\n### Input Method\r\n\r\n```sh\r\nsudo apt-get install ibus-sunpinyin\r\n```\r\n\r\n\r\n### Google Chrome\r\n\r\n* 方法1\r\n\r\n```sh\r\nwget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb  # 获取软件包\r\nsudo dpkg -i google-chrome-stable_current_amd64.deb  # 安装deb软件包\r\nsudo apt-get install -f  # 递归安装所有上一指令缺少的依赖库\r\nsudo dpkg -i google-chrome-stable_current_amd64.deb  # 解决依赖库问题后重装\r\n```\r\n\r\n* 方法2\r\n\r\n### everpad\r\n\r\n印象笔记\r\n\r\n* 安装\r\n\r\n```sh\r\nsudo add-apt-repository ppa:nvbn-rm/ppa\r\nsudo apt-get update\r\nsudo apt-get install everpad\r\n```\r\n\r\n* 配置\r\n\r\n```sh\r\nsudo vim /usr/share/pyshared/everpad/const.py\r\n```\r\n\r\n\r\n### VLC\r\n\r\nVideo Player\r\n\r\n```sh\r\nsudo apt-get install vlc\r\n```\r\n\r\n\r\n### Stickynotes\r\n\r\n```sh\r\nsudo add-apt-repository ppa:umang/indicator-stickynotes\r\nsudo apt-get update\r\nsudo apt-get install indicator-stickynotes\r\n```\r\n\r\n\r\n## 开发环境搭建\r\n\r\n### Vim\r\n\r\n* 安装\r\n\r\n```sh\r\nsudo apt-get install vim\r\n```\r\n\r\n* 配置\r\n\r\n### Java\r\n\r\n* 安装\r\n\r\n```sh\r\nmkdir /usr/java\r\ncd /usr/java\r\nsudo tar -xzvf ~/Downloads/jdk-8u45-linux-x64.tar.gz\r\n```\r\n\r\n* 配置\r\n\r\n```sh\r\nsudo vim /etc/profile\r\nsource etc/profile\r\n```\r\n\r\n\r\n### Latex\r\n\r\n* 准备工作(？不确定需不需要)\r\n\r\n    * 获取中文字体\r\n    * 从Windows复制\r\n\r\n    ```sh\r\n    sudo mkdir /usr/share/fonts/win\r\n    sudo cp /media/jeff/Windows8_OS/Windows/Fonts/{SIM,sim}* /usr/share/fonts/win/\r\n    sudo chmod 755 /usr/share/fonts/win/*\r\n    ```\r\n\r\n    * 下载Microsoft开放字体\r\n\r\n    ```sh\r\n    ```\r\n\r\n    * 获取Adobe字体\r\n    * 更新系统字体缓存\r\n\r\n    ```sh\r\n    sudo fc-cache -f -s -v\r\n    fc-list :lang=zh  # 查看系统现有中文字体\r\n    ```\r\n\r\n* 安装\r\n\r\n* 用法\r\n\r\n### Git\r\n\r\n* 安装\r\n\r\n```sh\r\nsudo apt-get install git\r\n```\r\n\r\n* 账户[设置][]\r\n\r\n    1. 检查系统是否已有可用*`SSH keys`*：\r\n\r\n    ```sh\r\n    ls -al ~/.ssh  # 列出现有SSH keys\r\n    ```\r\n\r\n    2. 如果有，直接跳到第三步，否则生成一个新的SSH keys：\r\n\r\n    ```sh\r\n    # Creates a new ssh key, using the provided email as a label\r\n    ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" \r\n    ```\r\n\r\n    选择默认密钥对保存路径(即弹出\"Enter file in which to save the key(default path):\"时，按*`Enter`*继续)，并选择一个好的安全的[passphrase][]。\r\n\r\n    3. 将key加入ssh-agent：\r\n\r\n    ```\r\n    # start the ssh-agent in the background\r\n    eval \"$(ssh-agent -s)\"\r\n    ssh-add ~/.ssh/id_rsa  # Add your SSH key to the ssh-agent\r\n    ```\r\n\r\n    4. 将key绑定到github账户：\r\n\r\n    ```\r\n    # Downloads and installs xclip.\r\n    sudo apt-get install xclip\r\n    # Copies the contents of the id_rsa.pub file to your clipboard>\r\n    xclip -sel clip < ~/.ssh/id_rsa.pub\r\n    ```\r\n\r\n    然后将其粘贴到GitHub账户Settings->SSH key->Add SSH key。\r\n\r\n    5. 验证连接\r\n\r\n    ```\r\n    ssh -T git@github.com  # Attempts to ssh to GitHub\r\n    ```\r\n\r\n    Type `yes`，如果看到\"Hi username! You've successfully authenticated, but GitHub does not provide shell access.\"，则说明连接成功。\r\n\r\n[设置]: https://help.github.com/articles/generating-ssh-keys/ \"generating ssh keys\"\r\n[passphrase]: https://help.github.com/articles/working-with-ssh-key-passphrases/ \"passphrase\"\r\n\r\n\r\n### NodeJS\r\n\r\n```sh\r\nsudo apt-get install npm  # 或者 sudo apt-get install nodejs\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}